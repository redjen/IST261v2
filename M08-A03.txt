The new classes for assignment M08-A03 are ContactSearchIndex and ContactSearchIndexRowFilter. The existing Contact and AbstractInteraction classes also use HashMaps as defined below.

HashMaps are an appropriate choice for maintaining “indexes” of the contact and interaction models in my application. This approach is described in the Java Collections Tutorial (Oracle, 2015). I chose HashMaps due to their support for key-value pairs and unordered values.

The convention for managing collections of model objects in IST261 is to create a class that encapsulates an ArrayList of those models. These ArrayLists work well as a data source for table models, but not when needing to look up an item by one of its fields. Searching an ArrayList requires iterating over each item until a match is found, an O(n) operation. A more efficient approach is to use a HashMap as an “index” with the key being the search field and the object being the value. HashMap::get is an O(1) operation and prevents the application’s performance being degraded as the number of data items increases. 

Two HashMaps are needed for implementation of this design. The first can be created in the abstract base class for contacts and interactions, with the object’s ID field as the key and the object as the value. The second is unique to interactions. Each interaction is associated with a contact and retrieving the list of interactions associated with a single contact is a common operation. Retrieval requires iterating over interactions and building a new collection of interactions with the specified contact ID, an O(n) operation. The lists of interactions for each contact could be constructed in advance and stored in a HashMap with the contact ID as the key and a list of interaction objects as the value. Retrieval of the list of contacts would then be an O(1) operation.

The “index” HashMaps need to be created and kept up to date in a performant manner, which can be accomplished by adding new objects to the index on creation and removing them from the HashMap when deleted. The HashMaps will be persisted with other application data and will not need to be recreated at application launch. 

In order to implement the search function required for this assignment I created the ContactSearchIndex class and used a HashMap as an index for searching for strings in contacts. Each key represents all of the 3-character and longer substrings found in any contact field, speeding up searches by eliminating the need to iterate and match strings over every field in every contact. I created a custom table row filter, ContactSearchIndexRowFilter, to perform the search operation and filter out the non-matching rows.  

The index generated by ContactSearchIndex is printed to the command line on startup.